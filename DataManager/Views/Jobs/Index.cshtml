@model PagedList.IPagedList<Job>
@{
    // Querystring
    RouteValueDictionary parameters = Request.QueryString.ToRouteValues().WithDefaults(new List<KeyValuePair<string, object>> {
      new KeyValuePair<string, object>("order", "asc"),
      new KeyValuePair<string, object>("page", "1"),
      new KeyValuePair<string, object>("query", ""),
      new KeyValuePair<string, object>("show", "40"),
      new KeyValuePair<string, object>("status", "1"),
      new KeyValuePair<string, object>("sort", Request.QueryString["q"] != null ? "hit" : "job-id")
    });

    // Variables
    string order = parameters["order"].ToString();
    string page = parameters["page"].ToString();
    string query = parameters["query"].ToString();
    string show = parameters["show"].ToString();
    string status = parameters["status"].ToString();
    string sort = parameters["sort"].ToString();

    bool isSearch = !string.IsNullOrEmpty(query);
    int results = 0;
    if (isSearch)
    {
        results = (int)ViewBag.Results;
    }
}

<p><a href="@Url.Action("Add", parameters)"><i class="fas fa-plus fa-fw"></i> Add a New Job</a></p>

<div class="manage">
    @using (Html.BeginForm(null, null, FormMethod.Get, new { @class = "filter" }))
    {
        <fieldset>
            <label for="show">Show</label>
            @Html.DropDownList("show", Options.Show(show))
            @if (isSearch)
            {
                @Html.Hidden("query", query)
            }
            else
            {
                @Html.DropDownList("status", new SelectList(ViewBag.JobStatuses as List<SelectListItem>, "Value", "Text", status))
            }
            @Html.Hidden("page", page)
            <button type="submit">Go</button>
        </fieldset>
    }
    @using (Html.BeginForm(null, null, FormMethod.Get, new { @class = "search" }))
    {
        <fieldset>
            <input class="autocomplete" data-target="#jid" data-url="/Suggest/Jobs" id="terms" maxlength="128" name="query" placeholder="Search Jobs…" required="required" type="text" value="@query" />
            <button type="submit"><i class="fas fa-search"></i></button>
            @Html.Hidden("jid")
        </fieldset>
    }
    @using (Html.BeginForm("SaveViewSetting", "Account", FormMethod.Post, new { @class = "ajax", data_ajax_action = "hide", data_ajax_done="restoreIcon", id = "column-chooser" }))
    {
        <fieldset>
            @Html.ColumnChoser(ViewBag.Columns as List<SelectListItem>)
            @Html.Hidden("Path", Request.Url.AbsolutePath)
            <button type="reset"><i class="fas fa-times fa-fw"></i> Close</button>
            <button type="submit"><i class="fas fa-save fa-fw"></i> Save</button>
        </fieldset>
    }
</div>

@if (Model.Any())
{
    <table class="list">
        <thead>
            <tr>
                <th>@Html.SortLink(sort, "Job ID", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "Job Number", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "Job Name", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "Erector", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "Project Manager", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "Street", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "City", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "State", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "Zip Code", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "General Contractor", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "Status", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "Travel Time", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "Route", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "Total Mileage (One Way)", null, null, parameters, null)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (Job item in Model)
                {
                <tr data-href="@Url.Action("Edit", parameters.CopyAndAdd("guid", item.JobID))">
                    <td>@item.JobID</td>
                    <td>@item.JobNumber</td>
                    <td>@item.JobName</td>
                    <td>@(item.ErectorID.HasValue ? item.Contact.DisplayName : string.Empty)</td>
                    <td>@(item.ProjectManagerID.HasValue ? item.Employee.LastFirst : string.Empty)</td>
                    <td>@item.Street</td>
                    <td>@item.City</td>
                    <td>@item.State</td>
                    <td>@item.ZIP</td>
                    <td>@item.GeneralContractor</td>
                    <td>@(item.JobStatusID.HasValue ? item.JobStatu.JobStatusName : string.Empty)</td>
                    <td>@(item.TravelTime.HasValue ? item.TravelTime.Value.ToString("F2") : string.Empty)</td>
                    <td>@(item.RouteID.HasValue ? item.Route.RouteName : string.Empty)</td>
                    <td>@item.TotalMileage</td>
                </tr>
            }
        </tbody>
    </table>
    @Html.PagedListPager(Model, p => Url.Action("Index", parameters.CopyAndReplace("page", p)), new PagedListRenderOptions
   {
       ItemSliceAndTotalFormat = "viewing {0} - {1} of {2}",
       DisplayItemSliceAndTotal = true,
       LinkToFirstPageFormat = "« first",
       LinkToPreviousPageFormat = "‹ previous",
       LinkToIndividualPageFormat = "{0}",
       LinkToNextPageFormat = "next ›",
       LinkToLastPageFormat = "last »"
   })
}
else
{
    <p>There are no Jobs at this time.</p>
}

