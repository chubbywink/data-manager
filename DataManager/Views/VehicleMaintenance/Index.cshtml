@model PagedList.IPagedList<VehicleMaintenance>
@{
    // Querystring
    RouteValueDictionary parameters = Request.QueryString.ToRouteValues().WithDefaults(new List<KeyValuePair<string, object>> {
      new KeyValuePair<string, object>("active", ""),
      new KeyValuePair<string, object>("order", "asc"),
      new KeyValuePair<string, object>("page", "1"),
      new KeyValuePair<string, object>("show", "40"),
      new KeyValuePair<string, object>("sort", Request.QueryString["q"] != null ? "hit" : "date-of-service")
    });

    // Variables
    string active = parameters["active"].ToString();
    string order = parameters["order"].ToString();
    string page = parameters["page"].ToString();
    string show = parameters["show"].ToString();
    string sort = parameters["sort"].ToString();
}

<p><a href="@Url.Action("Add", parameters)"><i class="fas fa-plus fa-fw"></i> Add a New Vehicle Maintenance Record</a></p>

<div class="manage">
    @using (Html.BeginForm(null, null, FormMethod.Get, new { @class = "filter" }))
    {
        <fieldset>
            <label for="show">Show</label>
            @Html.DropDownList("show", Options.Show(show))
            @Html.DropDownList("active", new SelectList(Options.Active(), "Value", "Text", active), "All", null)
            @Html.Hidden("page", page)
            <button type="submit">Go</button>
        </fieldset>
    }
</div>

@if (Model.Any())
{
    <table class="list">
        <thead>
            <tr>
                <th>@Html.SortLink(sort, "Date Of Service", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "Vehicle", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "Meter", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "Fuel Amount", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "MPG", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "Oil", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "Grease", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "Service", null, null, parameters, null)</th>
                <th class="hide"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (VehicleMaintenance item in Model)
            {
                <tr data-href="@Url.Action("Edit", parameters.CopyAndAdd("guid", item.VehicleMaintenanceID))">
                    <td>@item.DateOfService.ToShortDateString()</td>
                    <td>@item.Vehicle.VehicleLabel</td>
                    <td>@item.Meter</td>
                    <td>@item.FuelAmount</td>
                    <td></td>
                    <td>@(item.Oil.HasValue && item.Oil.Value ? "Yes" : "No")</td>
                    <td>@(item.Grease ? "Yes" : "No")</td>
                    <td>@(item.Service ? "Yes" : "No")</td>
                    <td class="hide">@Html.ActionLink("Edit", "Edit", parameters.CopyAndAdd("guid", item.VehicleMaintenanceID))</td>
                </tr>
            }
        </tbody>
    </table>
    @Html.PagedListPager(Model, p => Url.Action("Index", parameters.CopyAndReplace("page", p)), new PagedListRenderOptions
    {
        ItemSliceAndTotalFormat = "viewing {0} - {1} of {2}",
        DisplayItemSliceAndTotal = true,
        LinkToFirstPageFormat = "« first",
        LinkToPreviousPageFormat = "‹ previous",
        LinkToIndividualPageFormat = "{0}",
        LinkToNextPageFormat = "next ›",
        LinkToLastPageFormat = "last »"
    })
}
else
{
    <p>There are no Vehicle Maintenance Records at this time.</p>
}

