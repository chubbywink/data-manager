@model PagedList.IPagedList<Bed>
@{
    // Querystring
    RouteValueDictionary parameters = Request.QueryString.ToRouteValues().WithDefaults(new List<KeyValuePair<string, object>> {
      new KeyValuePair<string, object>("mix", ""),
      new KeyValuePair<string, object>("order", "asc"),
      new KeyValuePair<string, object>("page", "1"),
      new KeyValuePair<string, object>("show", "40"),
      new KeyValuePair<string, object>("sort", "name")
    });

    // Variables
    string mix = parameters["mix"].ToString();
    string order = parameters["order"].ToString();
    string page = parameters["page"].ToString();
    string show = parameters["show"].ToString();
    string sort = parameters["sort"].ToString();
}

<p><a href="@Url.Action("Add", parameters)"><i class="fas fa-plus fa-fw"></i> Add a New Bed</a></p>

<div class="manage">
    @using (Html.BeginForm(null, null, FormMethod.Get, new { @class = "filter" }))
    {
        <fieldset>
            <label for="show">Show</label>
            @Html.DropDownList("show", Options.Show(show))
            @Html.DropDownList("mix", new SelectList(ViewBag.Mixes as List<SelectListItem>, "Value", "Text", mix))
            @Html.Hidden("page", page)
            <button type="submit">Go</button>
        </fieldset>
    }
    @using (Html.BeginForm("SaveViewSetting", "Account", FormMethod.Post, new { @class = "ajax", data_ajax_action = "hide", data_ajax_done="restoreIcon", id = "column-chooser" }))
    {
        <fieldset>
            @Html.ColumnChoser(ViewBag.Columns as List<SelectListItem>)
            @Html.Hidden("Path", Request.Url.AbsolutePath)
            <button type="reset"><i class="fas fa-times fa-fw"></i> Close</button>
            <button type="submit"><i class="fas fa-save fa-fw"></i> Save</button>
        </fieldset>
    }
</div>

@if (Model.Any())
{
    <table class="list">
        <thead>
            <tr>
                <th>@Html.SortLink(sort, "Name", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "Width", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "Length", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "Strand Length", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "Max # Of Pours Per Day", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "Mix", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "Jack #", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "# Of Cylinders", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "Slump", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "Release Spec", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "28 Day Spec", null, null, parameters, null)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (Bed item in Model)
            {
                <tr data-href="@Url.Action("Edit", parameters.CopyAndAdd("guid", item.BedID))">
                    <td>@item.BedName</td>
                    <td>@item.Width</td>
                    <td>@item.Length</td>
                    <td>@item.StrandLength</td>
                    <td>@item.MaxNumOfPoursPerDay</td>
                    <td>@(item.DefaultMixID.HasValue ? item.Mix.MixName : string.Empty)</td>
                    <td>@item.DefaultJackNumber</td>
                    <td>@item.DefaultNumOfCylinders</td>
                    <td>@item.DefaultSlump</td>
                    <td>@item.DefaultReleaseSpec</td>
                    <td>@item.Default28DaySpec</td>
                </tr>
            }
        </tbody>
    </table>
    @Html.PagedListPager(Model, p => Url.Action("Index", parameters.CopyAndReplace("page", p)), new PagedListRenderOptions
{
    ItemSliceAndTotalFormat = "viewing {0} - {1} of {2}",
    DisplayItemSliceAndTotal = true,
    LinkToFirstPageFormat = "« first",
    LinkToPreviousPageFormat = "‹ previous",
    LinkToIndividualPageFormat = "{0}",
    LinkToNextPageFormat = "next ›",
    LinkToLastPageFormat = "last »"
})
}
else
{
    <p>There are no Beds at this time.</p>
}

