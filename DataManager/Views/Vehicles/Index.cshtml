@model PagedList.IPagedList<Vehicle>
@{
    // Querystring
    RouteValueDictionary parameters = Request.QueryString.ToRouteValues().WithDefaults(new List<KeyValuePair<string, object>> {
      new KeyValuePair<string, object>("active", ""),
      new KeyValuePair<string, object>("location", ""),
      new KeyValuePair<string, object>("order", "asc"),
      new KeyValuePair<string, object>("page", "1"),
      new KeyValuePair<string, object>("query", ""),
      new KeyValuePair<string, object>("show", "40"),
      new KeyValuePair<string, object>("sort", Request.QueryString["q"] != null ? "hit" : "code"),
      new KeyValuePair<string, object>("trailer", ""),
      new KeyValuePair<string, object>("type", "")
    });

    // Variables
    string active = parameters["active"].ToString();
    string location = parameters["location"].ToString();
    string order = parameters["order"].ToString();
    string page = parameters["page"].ToString();
    string query = parameters["query"].ToString();
    string show = parameters["show"].ToString();
    string sort = parameters["sort"].ToString();
    string trailer = parameters["trailer"].ToString();
    string type = parameters["type"].ToString();

    bool isSearch = !string.IsNullOrEmpty(query);
    int results = 0;
    if (isSearch)
    {
        results = (int)ViewBag.Results;
    }
}

<p>
    @if (isSearch)
    {
        <a href="@Url.Action("Index")"><i class="fas fa-arrow-left fa-fw"></i> Back</a><span> | Found @results result@(results == 1 ? "" : "s")</span>
    }
    else
    {
        <a href="@Url.Action("Add", parameters)"><i class="fas fa-plus fa-fw"></i> Add a New Vehicle</a>
    }
</p>

<div class="manage">
    @using (Html.BeginForm(null, null, FormMethod.Get, new { @class = "filter" }))
    {
        <fieldset>
            <label for="show">Show</label>
            @Html.DropDownList("show", Options.Show(show))
            @if (isSearch)
            {
                @Html.Hidden("query", query)
            }
            else
            {
                @Html.DropDownList("active", new SelectList(Options.Active(), "Value", "Text", active), "All", null)
                @Html.DropDownList("location", new SelectList(ViewBag.Locations as List<SelectListItem>, "Value", "Text", type))
                @Html.DropDownList("trailer", new SelectList(ViewBag.TrailerTypes as List<SelectListItem>, "Value", "Text", type))
                @Html.DropDownList("type", new SelectList(ViewBag.VehicleTypes as List<SelectListItem>, "Value", "Text", type))
            }
            @Html.Hidden("page", page)
            <button type="submit">Go</button>
        </fieldset>
    }
    @using (Html.BeginForm(null, null, FormMethod.Get, new { @class = "search" }))
    {
        <fieldset>
            <input class="autocomplete" data-target="#vid" data-url="/Suggest/Vehicles" id="terms" maxlength="128" name="query" placeholder="Search Vehicles…" required="required" type="text" value="@query" />
            <button type="submit"><i class="fas fa-search"></i></button>
            @Html.Hidden("vid")
        </fieldset>
    }
    @using (Html.BeginForm("SaveViewSetting", "Account", FormMethod.Post, new { @class = "ajax", data_ajax_action = "hide", data_ajax_done="restoreIcon", id = "column-chooser" }))
    {
        <fieldset>
            @Html.ColumnChoser(ViewBag.Columns as List<SelectListItem>)
            @Html.Hidden("Path", Request.Url.AbsolutePath)
            <button type="reset"><i class="fas fa-times fa-fw"></i> Close</button>
            <button type="submit"><i class="fas fa-save fa-fw"></i> Save</button>
        </fieldset>
    }
</div>

@if (Model.Any())
{
    <table class="list">
        <thead>
            <tr>
                <th>@Html.SortLink(sort, "Code", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "Name", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "Account Number", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "Vehicle Type", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "Driver", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "Location", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "EZPass", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "Active", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "Length", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "Make", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "Registration", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "Registration Date", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "Registration Expires", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "VIN", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "Weight", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "Year", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "Trailer Type", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "Next Oil", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "Next Grease", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "Next Service", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "Current Meter Reading", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "Last Oil", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "Last Grease", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "Last Service", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "Should Export Usage", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "Is On Road", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "Number Of Axles", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "Gross Axle Weight Rating", null, null, parameters, null)</th>
                <th>@Html.SortLink(sort, "Gross Vehicle Weight Rating", null, null, parameters, null)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (Vehicle item in Model)
            {
                Employee driver = item.DefaultDriver();
                <tr data-href="@Url.Action("Edit", parameters.CopyAndAdd("guid", item.VehicleID))">
                    <td>@item.VehicleCode</td>
                    <td>@item.VehicleName</td>
                    <td>@item.VehicleNumber</td>
                    <td>@item.VehicleType.VehicleTypeName</td>
                    <td>@(driver != null ? driver.LastFirst : string.Empty)</td>
                    <td>@(item.LocationID.HasValue ? item.Location.LocationName : string.Empty)</td>
                    <td>@item.EZPass</td>
                    <td>@(item.IsActive ? "Yes" : "No")</td>
                    <td>@item.Length</td>
                    <td>@item.Make</td>
                    <td>@item.Registration</td>
                    <td>@(item.RegistrationDate.HasValue ? item.RegistrationDate.Value.ToShortDateString() : string.Empty)</td>
                    <td>@(item.RegistrationExpiration.HasValue ? item.RegistrationExpiration.Value.ToShortDateString() : string.Empty)</td>
                    <td>@item.VIN</td>
                    <td>@item.Weight</td>
                    <td>@item.Year</td>
                    <td>@(item.TrailerTypeID.HasValue ? item.TrailerType.TrailerTypeName : string.Empty)</td>
                    <td>@item.NextOil</td>
                    <td>@item.NextGrease</td>
                    <td>@(item.NextService.HasValue ? item.NextService.Value.ToShortDateString() : string.Empty)</td>
                    <td>@item.CurrentMeterReading</td>
                    <td>@item.LastOil</td>
                    <td>@item.LastGrease</td>
                    <td>@(item.LastService.HasValue ? item.LastService.Value.ToShortDateString() : string.Empty)</td>
                    <td>@(item.ShouldExportUsage ? "Yes" : "No")</td>
                    <td>@(item.IsOnRoad ? "Yes" : "No")</td>
                    <td>@item.NumberOfAxles</td>
                    <td>@item.GrossAxleWeightRating</td>
                    <td>@item.GrossVehicleWeightRating</td>
                </tr>
            }
        </tbody>
    </table>
    @Html.PagedListPager(Model, p => Url.Action("Index", parameters.CopyAndReplace("page", p)), new PagedListRenderOptions
    {
        ItemSliceAndTotalFormat = "viewing {0} - {1} of {2}",
        DisplayItemSliceAndTotal = true,
        LinkToFirstPageFormat = "« first",
        LinkToPreviousPageFormat = "‹ previous",
        LinkToIndividualPageFormat = "{0}",
        LinkToNextPageFormat = "next ›",
        LinkToLastPageFormat = "last »"
    })
}
else
{
    if (isSearch)
    {
        <p>No results found for <strong>@query</strong></p>
    }
    else
    {
        <p>There are no Vehicles at this time.</p>
    }
}
